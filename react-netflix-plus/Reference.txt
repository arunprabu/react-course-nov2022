ReactJS 
---
  Components
  ---
    1. Functional Components
        * coded as functions

        1.1 Functional components with Named Function
        1.2 Functional components with Anonymous Function
        1.3 Functional components with Arrow Function

        * were called as Stateless Components (Before React V 16.8) and dumb components 
        * Now, states are possible in Fn components (After React V 16.8)

    2. Class Components
        * coded as classes in JS 
        * are called as stateful components 
        * are smart components and containers 


       
Single Page App (SPA)
---
  7 Characteristics 
  ---
    1. Pages should not reload/refresh [DONE]
    2. URL should be changed [DONE]
    3. Browser History should be maintained [DONE]
    4. Retain Header and Footer [DONE]
    5. The content in b/w header and footer should be updated [DONE]
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO]


Routing 
---
  Step 0:
  --
    Identify the menus

    Menu: Home      URL:localhost:3000/      
    Menu: About     URL:localhost:3000/about       
    Menu: Contact   URL:localhost:3000/contact 

  Step 1:
  --- 
    Let's setup the URLs in Menu comp 

  Step 2:
  ---
    npm i react-router-dom 

  Step 3:
  --
    Identify the URLs and matching components

    localhost:3000/         -- Home Component 
    localhost:3000/about    -- About Component
    localhost:3000/contact  -- Contact Component

    We need to create Home, About and Contact Components

  Step 4:
  --
    Let's configure the URL in App.js 
    
    <BrowserRouter>
      <div>
        <Header></Header>

        <div className="mt-5 container">
          <Routes>
            <Route path='/' element={ <Home /> }/>
            <Route path='/about' element={<About />} />
            <Route path='/contact' element={<Contact />} />
          </Routes>
        </div>
        
        <Footer />
      </div>
    </BrowserRouter>

  Step 5: 
  --
    Check the app. Pages will refresh. Fix it by replacing <a href> with <Link to>
--


  Concepts
  ---
    Thinking in React 
    Components 
      Props [DONE]
      States [DONE]
          * available in both type of Components 
      Events [DONE]
      List and Keys [DONE]

    Data Binding 
    Cross Component Communication
      1. Parent to Child Component Communication [DONE]
        using Props 
      2. Child to Parent Component Communication [TODO]
        using Props + Events + ... 
      3. Any to Any Component Communication 
        3.1 using ContextAPI + Hooks 
        3.2 using ReduxJS/Flux/MobX 

    Styling [DONE]
    Two Way Binding [DONE]
    Lifecycle Hooks [DONE]
    Routing [DONE]
    Child to Parent Comp Commn[TODO]

    Fragments [DONE]
    StyledComponents [DONE]

    Typechecking With PropTypes [DONE]
    
    HOC [DONE]
    Error Boundary [DONE]
    Hooks [DONE]
    
    
    Unit Testing

    Monday
    --
    Unit Testing 

    Tuesday, Wednesday
    --
    Redux 

    
    


    



Project Structure
---
  src/
    components/
      shared/
        Header/
        Footer/
        Menu/
      Home/
    App.js 
    App.css 
    index.js 
    index.css 


Static Typechecking in React Projects 
--
  1. TypeScript 
  2. FlowJS 
  3. PropTypes 

======
React Hooks
---
A new concept was introduced in React 16.8 - Hooks. 
They let you use state and other React features without writing a class.
Many of the features available to classes - such as lifecycle methods and states - 
are not available to functional components. 
The hooks introduced in react adds all that functionality and more.

Life Cycle Hooks and React Hooks are not same. 

This feature has loads of cools things to even replace redux .
In this example, let's build a few things just by using hooks, 
a potential alternative to redux.

Hooks enable a functional component to have state in it.
This is also called as Hook state. 

Example: 
  within a fn comp, 

  import {useState } from 'react';

  //this is a data in a variable.. not a state.
  const myProfile = {
    name: 'Arun',
    city: 'Chennai'
  }

  // to have state inside fn comp, we can use useState() . 
  // this will take in data and return getter and setter in an array. 
  // We can do array destructuring to capture both.
  const [profile, setProfile] = useState(myProfile);

  const [age, setAge] = useState(20); // valid -- can create multiple

  // then, we can log 
  console.log(profile);

  const updateProfile = () => {
    setProfile({
      name: 'VJ',
      city: 'Chennai'
    });
    console.log(profile);
  }

  And have a button in JSX to call updateProfile method.
    <button type='button' onClick={updateProfile}>Update Profile</button>

  
===

Rules of Hooks
---------------
Hooks are JavaScript functions, but they impose two additional rules:

Only call Hooks at the top level. 
Don’t call Hooks inside loops, conditions, or nested functions.
Only call Hooks from React functional components. 
Don’t call Hooks from regular JavaScript functions. 
(There is just one other valid place to call Hooks — your own custom Hooks.)

=======================

useState() Hook 
--- 

useEffect() - Hook 
  is what componentDidMount and componentDidUpdate to class comp 
  will get executed after render cycle 
  useEffect( () => {
    console.log('test');
  })


useCallback()
Hook prevents the child component rendering if the dependency is not changed at all 
For more refer: https://kentcdodds.com/blog/usememo-and-usecallback
Important one for performance optimization

---
useContext() - Hooks 

  Context API - Steps 
  ---
    Let's share the data across comp 

    1. Create context with any data or null 
        createContext()

    2. Provide the data to the whole app -- it is called as app wide data 
        Using  
        <Context.Provider value={ }>
          <App />
        </Context.Provider>
        
    3. Consume the context data in your comps 
        useContext();

===

  ----



Rules of Hooks 
  Refer: 
  https://reactjs.org/docs/hooks-rules.html


Functionality
Responsive 
Code Quality (format, comments, best practices, Naming Conventions )
Code Duplication
Unit Testing 



---
Naming Conventions
---
  * Variables, Methods - camelCase
  * string, number, obj - appName, phone, contact
  * boolean - isValid, isLoggedIn, hasToken, isAuth
  * arrays - colors, contacts or colorList, contactList
  * Components, Classes - PascalCase
  * File Names of Components - PascalCase
  * Folder Namesof Components  - PascalCase
  * Event Handlers - camelCase 
    Should have handle prefix or Handler Suffix
      handleAddToFav() or else addToFavHandler()
  * Never use snake_case --
  * SNAKE_CASE  -- is okay for constants (with all caps), enum (with all caps)

--

HTTP methods
---
  POST - Create an Employee 
  GET  - Listing Employees /Fetching Employee Details 
  PUT  - Updating an Employee 
  PATCH  - Updating an Employee 
  DELETE - Deleting an Employee 


===

Traditional Software Development Approach 
------
  Requirements 
    Designing 
      Development 
        Testing 
          Deployment 
            Maintanance 

Dev => QA => (bugs[50]) => Dev => QA => (bugs [20]) => Dev => QA => (bugs [5]) => Dev => QA => (no bugs) => (QA PASSED) => Deployment 

Project: Calculator 
---
  Features: Addition 

  Development
  ---
    Prepare: Test Cases / Test specs 
      1. Add should take in only numbers as inputs 
      2. Add should give number as output 
      3. Into add if invalid input are entered disabled add button 

    function add(a, b){
      if(typeof a == 'number' && typeof b == 'number'){
        return a + b;
      }
    }

    add(10, 20); // 30
    add("10", 20); // no bug 
    add('ABC', 20); // no bug 
    add('****', '$$$$'); // no bug
  
    Ref: FRD 


  ----
=========

Modern Software Development Approaches  
  1. Test-Driven Development (TDD)
  2. Behaviour-Driven Development (BDD)

  Test Cases => Dev => (Tools) => (no bug) => [CODE COMPLETE]

Automation Testing 
---
  0. Static Type Checking (TS / FlowJS / PropTypes )
  1. Unit Testing  (Will learn)
        * testing tiny, independent unit of our component
        * testing the comp in isolation 
        * Bug Reduction Density: 40-80% 
        
        Tools: 
        --- 
          JEST JS (Unit Testing Framework + Test runner)
          React Testing Library (RTL)

          EnzymeJS (No official support for React JS v 18 projects)

  2. Integration Testing
        * testing the component by integrating multiple components together 
        * testing the comp with service calls as well

        Tools:
        --
          JEST JS (Unit Testing Framework + Test runner)
          React Testing Library (RTL)

          EnzymeJS (No official support for React JS v 18 projects)

  3. End 2 End (e2e) Testing 
        * Testing the whole app as one entity 
        Tools:
        ---
          * Selenium 
          * CypressJS 
          * Protractor 

Testing Patterns: 
-----
  1. AAA (Arrange/Act/Assert)
      * JEST 
  2. Given / When / Then 
      * JasmineJS 
 
--

1. How to write test specs?
2. Where to write test specs? (in test file )
3. How to make use of the Jest? 


---

Unit Testing in ReactJS 
--
  1. Testing JSX [DONE]
  2. Props [DONE]
  3. Test placeholder [DONE]
  4. CSS styles [DONE]
  5. CSS class [DONE]
  6. Events [DONE]
  7. States [DONE]
  8. Snapshot [DONE]
  9. Testing API calls [DONE]
  10. Mocking [DONE]
  11. Spy [DONE]



Build Checklist
---
  1. check console for errors and fix
  2. remove all console.logs 
  3. fix all warnings that you will find in console 
  4. have zero linting errors 

then, npm run build 
--

  