Browser
---
  HTML Renderer  (HTML)
  CSS Parser  (CSS)
  JS Engine  (JS)

  Browser Families
  --
    Webkit 
      Safari 
      
    Mozilla 
      Firefox

    Chromium (Webkit + Mozilla + extra )
      Chrome 
      Opera
      Edge
      Brave
    

HTML 
---
  * Structural Layer 
  * Standard 

  Layout
  ---
    1. Fixed Layout 
    2. Fluid Layout

  HTML Elements
  ---
    1. Block Level Elements 
        Examples: header, main, footer, h1-h6, div, section
    2. Inline Elements
        Examples: a, img, button, span, input, textarea


CSS 
---
  * Presentation Layer 
  * Standard



JS 
--
  * Interaction Layer 

---

Naming Conventions 
---

  Casing Types
  ---
    1. PascalCase   
        * recommended for object oriented classes in JavaScript and TypeScript  
        * also recommended for Interface in TypeScript

        examples: 
          class CarDetails{

          }

          interface User{

          }
      
    2. camelCase 
        * recommended for variables, const, functions, methods in JS and TS 
        * recommended for id's of html elements 

        Examples: 
          var myCar = 'BMW';
          function getCarInfo(){
            
          }

    3. kebab-case 
        * recommended for css classes and urls 
        * recommended for file names, folder names, assets in front end projects
        * okay for id's of html elements if architect accepts 
        
        Examples:
          btn-primary 
          slideshow-container

    4. snake_case
        * never ever use this.
        * okay for const in JS and TS if architect accepts 
        Example:  
          const MAX_STUDENTS_PER_CLASS = 30;


-----

CSS 
---
  * Cascading Style Sheet 
  * Presentation Layer 

  CSS Types 
  1. Inline CSS 
      * Coded directly in the html element 
      * coded with style attribute 

      Disadv
      ---
        1. Styles can't be used in other elements
        2. Styles can't be used in other pages
        3. Logical separation of layers can't be followed

  2. Internal CSS 
      * coded inside the html file itself 
      * coded in between style tag -- inside head tag 
          <style> 
            /* Internal Styles */
            selector {
              /* style definitions */
              property: value;
            }
          <style>

      Disadv
      ---
        1. Styles can't be used in other pages
        2. Logical separation of layers can't be followed


  3. External CSS 
      * will be coded in separate css file with .css being file extension 
      * the file should be linked from html file

      --


  CSS Syntax
  ---
    selector {
      /* style definitions */
      property: value;
    }

  Selectors
  ----
    1. Element / Tag Selector 
    2. ID Selector (NOT RECOMMENED - use class selector)
    3. Class Selector 
    4. Attribute Selector [TODO]
    5. Pseudo Selector [TODO]
    6. Universal Selector
    
---

JS 
--

  ECMAScript (ES)
  --
    * Standard 
    * Grammar 
    
    Implementation:
      * JS, JScript, ActionScript, GoogleAppsScript, QtScript

  --
    Before 2015 
    --
    * JS / ES were not Object Oriented (no class keyword , no export, no import )

    After 2015
    ---
      * JS / ES has become Object Oriented 
      * class, import, export, extends 
      
---

Types of Languages based on Datatyping 
--
  1. Strictly-typed Languages / Strongly-Typed Languages
      Examples: Java, C#

      Syntax: 
        String myName = 'John'; 
        myName = 'Steve'; // valid
        myName = 100; // error 

  2. Loosely-typed Languages
      Examples: JavaScript, PHP, Python

      Syntax in JS:
        var myName = 'John'; 
        myName = 'Steve'; // valid 
        myName = 100; // valid 
        myName = true;
        myName = undefined;
        myName = null;
        myName = [];
        myName = {};
        myName = function() {

        }

      * Dynamically-typed language 

JS 
--
  1. Inline JS 
      
  2. Internal JS 
  3. External JS 

TypeScript 
---
  TS = JS + Datatyping  

  SYNTAX IN TS
  --
    1. Explicit DataTyping  
      var x: number = 10;
      x = 100; // valid 
      x = true; // error 
    
  ---
    2. Implicit DataTyping 
    var myName = "John"; 
    myName = true; // error  

  --

  var y; 
  y = 10; // valid 
  y = true; /// valid 

---

  Some More Datatypes 
  ---
    var x: number = 10;
    var myName: string = "John";
    var isValid: boolean = true;
    var u: undefined;
    var n: null = null; 
    var colors: string[] = ['red', 'green', 'blue'];
    var colors: Array<string> = ['red', 'green', 'blue'];


  TypeScript Compiler (TSC)
  --
    TS => (TSC) => JS 


---

ReactJS 
---
  HTML
  CSS 
  JS 
  ES2015 

  NodeJS Ecosystem (30 mins - 50 mins)
  
  Webapps 
  --
    1. Server Side Rendering Apps (SSR)
        * Pages will reload / refresh 

        Arch
        ---
        1 Server -- port number: 8080 
        
        Tech Stack
        ---
          Front End (HTML, CSS, JS) + Back End (Java/.Net/PHP/...)

        Server's Response: HTML, CSS, JS + Data

        Disadv
        --
          1. Pages will reload / refresh 
          2. Server has to do the heavy-lifting (Slower webapps)
          3. Not a better UX 
          4. Bandwidth Consumption is more 
          5. Expensive 

    2. Client Side Rendering Apps (CSR)
        




